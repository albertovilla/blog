{
  
    
        "post0": {
            "title": "Applying Tensorflow to Fashion MNIST dataset",
            "content": "Library imports . import tensorflow as tf from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Flatten, Dense, Conv2D, MaxPool2D import matplotlib.pyplot as plt import random import datetime # Load the TensorBoard notebook extension %load_ext tensorboard . Data loading . Fashion MNIST dataset which contains 70,000 grayscale images in 10 categories. Each image in the dataset represents an article of clothing with a 28 x 28 pixels image.The possible clothing articles range from T-shirt/top to Ankle boot. . Tensorflow provides us with a simple way to load the training and test data through the tf.keras.datasets module, in this case using the function tf.keras.datasets.fashion_mnist.load_data(). . (train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.fashion_mnist.load_data() . print(f&#39;There are {len(train_labels)} in the training dataset and {len(test_labels)} in the test set&#39;) . There are 60000 in the training dataset and 10000 in the test set . Data visualization . Let&#39;s have a look at the data we have just loaded using a helper functions to plot a grid with randomly selected samples from one of the two datasets (training / test) that we have just loaded. . Note: the labels in the training and test dataset are values between 0 and 9 whose corresponding description is obtained using the index value in the list clothing_articles . clothing_articles = [&#39;T-shirt/top&#39;, &#39;Trouser&#39;, &#39;Pullover&#39;, &#39;Dress&#39;, &#39;Coat&#39;, &#39;Sandal&#39;, &#39;Shirt&#39;, &#39;Sneaker&#39;, &#39;Bag&#39;, &#39;Ankle boot&#39;] def plot_images_grid(images, labels, rows=4, cols=4): width = cols * 2 height = cols * 2 fig = plt.figure(figsize=(width, height)) for i in range(1, rows * cols + 1): # get a random index and obtain image and label idx = random.randint(0, len(images)-1) img = images[idx] label = clothing_articles[labels[idx]] fig.add_subplot(rows, cols, i) plt.title(label, {&#39;fontsize&#39;: 16, &#39;color&#39;: &#39;blue&#39;}) plt.axis(&#39;off&#39;) plt.imshow(img.squeeze(), cmap=&#39;gray&#39;) plt.show() . plot_images_grid(train_images, train_labels) . Now, we need to reshape the images in order to add the number of channels. If we check the current shape of train_images: . train_images.shape (60000, 28, 28) . train_images = train_images.reshape(train_images.shape[0], train_images.shape[1], train_images.shape[2], 1) test_images = test_images.reshape(test_images.shape[0], test_images.shape[1], test_images.shape[2], 1) . Both the train_images and the train_labels are values between 0 and 255. In order to improve the neural network training it is usual to normalize those values so the are in the range 0 to 1. . train_images = train_images / 255.0 test_images = test_images / 255.0 . CNN model . Model definition . Let&#39;s create a simple CNN model to recognize the images. . model = Sequential([ Conv2D(filters=32, kernel_size=(3,3), activation=tf.nn.relu, input_shape=(28, 28, 1), name=&#39;conv_1&#39;), MaxPool2D(pool_size=(2,2), name=&#39;maxpool_1&#39;), Conv2D(filters=64, kernel_size=(3,3), activation=tf.nn.relu, name=&#39;conv_2&#39;), MaxPool2D(pool_size=(2,2), name=&#39;maxpool_2&#39;), Flatten(name=&#39;flatten&#39;), Dense(128, activation=tf.nn.relu, name=&#39;dense_1&#39;), Dense(10, activation=tf.nn.softmax, name=&#39;dense_2&#39;) ]) . model.summary() . Model: &#34;sequential&#34; _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= conv_1 (Conv2D) (None, 26, 26, 32) 320 _________________________________________________________________ maxpool_1 (MaxPooling2D) (None, 13, 13, 32) 0 _________________________________________________________________ conv_2 (Conv2D) (None, 11, 11, 64) 18496 _________________________________________________________________ maxpool_2 (MaxPooling2D) (None, 5, 5, 64) 0 _________________________________________________________________ flatten (Flatten) (None, 1600) 0 _________________________________________________________________ dense_1 (Dense) (None, 128) 204928 _________________________________________________________________ dense_2 (Dense) (None, 10) 1290 ================================================================= Total params: 225,034 Trainable params: 225,034 Non-trainable params: 0 _________________________________________________________________ . Define the optimizer to be used during training, loss and the metrics to be gathered. . model.compile(optimizer=&#39;adam&#39;, loss=&#39;sparse_categorical_crossentropy&#39;, metrics=[&#39;accuracy&#39;]) . Model training . Let&#39;s train the model for 10 epochs. . log_dir = &quot;logs/fit/&quot; + datetime.datetime.now().strftime(&quot;%Y%m%d-%H%M%S&quot;) tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1) . EPOCHS = 10 model.fit(train_images, train_labels, epochs=EPOCHS, validation_data=(test_images, test_labels), callbacks=[tensorboard_callback]) . Epoch 1/10 1875/1875 [==============================] - 25s 13ms/step - loss: 0.6092 - accuracy: 0.7794 - val_loss: 0.3540 - val_accuracy: 0.8689 Epoch 2/10 1875/1875 [==============================] - 23s 12ms/step - loss: 0.3100 - accuracy: 0.8881 - val_loss: 0.3128 - val_accuracy: 0.8811 Epoch 3/10 1875/1875 [==============================] - 23s 12ms/step - loss: 0.2572 - accuracy: 0.9037 - val_loss: 0.2728 - val_accuracy: 0.8968 Epoch 4/10 1875/1875 [==============================] - 23s 12ms/step - loss: 0.2151 - accuracy: 0.9218 - val_loss: 0.2656 - val_accuracy: 0.9042 Epoch 5/10 1875/1875 [==============================] - 24s 13ms/step - loss: 0.1934 - accuracy: 0.9282 - val_loss: 0.2605 - val_accuracy: 0.9040 Epoch 6/10 1875/1875 [==============================] - 23s 12ms/step - loss: 0.1684 - accuracy: 0.9360 - val_loss: 0.2562 - val_accuracy: 0.9102 Epoch 7/10 1875/1875 [==============================] - 23s 12ms/step - loss: 0.1482 - accuracy: 0.9440 - val_loss: 0.2546 - val_accuracy: 0.9110 Epoch 8/10 1875/1875 [==============================] - 23s 12ms/step - loss: 0.1304 - accuracy: 0.9518 - val_loss: 0.2627 - val_accuracy: 0.9135 Epoch 9/10 1875/1875 [==============================] - 23s 12ms/step - loss: 0.1161 - accuracy: 0.9568 - val_loss: 0.2684 - val_accuracy: 0.9127 Epoch 10/10 1875/1875 [==============================] - 23s 12ms/step - loss: 0.1004 - accuracy: 0.9627 - val_loss: 0.2795 - val_accuracy: 0.9069 . &lt;tensorflow.python.keras.callbacks.History at 0x167fe0a9280&gt; . %tensorboard --logdir logs/fit . Model evaluation . Last but not least, we can evaluate the model against the test data to check the accuracy. . model.evaluate(test_images, test_labels) . 313/313 [==============================] - 1s 4ms/step - loss: 0.2795 - accuracy: 0.9069 . [0.27950578927993774, 0.9068999886512756] .",
            "url": "https://torchml.com/tensorflow/2020/04/27/CNN_FashionMNIST.html",
            "relUrl": "/tensorflow/2020/04/27/CNN_FashionMNIST.html",
            "date": " • Apr 27, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://torchml.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://torchml.com/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://torchml.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://torchml.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}